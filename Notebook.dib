#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"aliases":[],"languageName":"csharp","name":"csharp"}]}}

#!markdown

# Getting started with the Validators library.

## A Basic Example

First things first:

#!csharp

#r "Validators.NewtonsoftJson\bin\Debug\net7.0\Validators.NewtonsoftJson.dll"

using static Validators.NewtonsoftJson.Json;
using Newtonsoft.Json.Linq;

#!markdown

Let's create a `JObject` to validate:

#!csharp

var target = JObject.Parse("""
    {
        "a": 1,
        "b": 2
    }
    """);

#!markdown

Then a validator which checks that:
* the target is a `JObject` (by using `IsObject`) and
* it has keys `"a"` and `"b"` (`HasRequiredKeys("a", "b")`) and
* values for `"a"` and `"b"` are both numbers.

#!csharp

var validator = And(
    IsObject,
    HasRequiredKeys("a", "b"),
    DiveInto("a", IsNumber),
    DiveInto("b", IsNumber));

#!markdown

And finally run the validator:

#!csharp

var valid = !validator.Validate(target).Any();
valid

#!markdown

There are no errors. Let's introduce some and re-run the validator:

#!csharp

target = JObject.Parse("""
    {
        "a": 1,
        "c": 2
    }
    """);
validator.Validate(target).Display();

#!markdown

Let's also introduce the the restriction that no extra keys are allowed and re-run the validator.

#!csharp

validator = And(
    IsObject,
    HasRequiredKeys("a", "b"),
    HasValidKeys("a", "b"),
    DiveInto("a", IsNumber),
    DiveInto("b", IsNumber));
validator.Validate(target).Display();

#!markdown

Let's add a case sensitive enum validation:

#!csharp

validator = And(
    IsObject,
    HasRequiredKeys("a", "b"),
    DiveInto("a", IsNumber),
    DiveInto("b", IsNumber),
    DiveInto("c", IsOneOf(false, "First", "Second"))); // Delete `false` to get the case insensitive (default) version.
target = JObject.Parse("""
    {
        "a": 1,
        "b": 2,
        "c": "first"
    }
    """);
validator.Validate(target).Display();

#!markdown

We can extract the invalid content:

#!csharp

using Validators.NewtonsoftJson;

var errors = validator.Validate(target);
var content = errors.First().ExtractInvalidContent(target);
content.ToString().Display();

#!markdown

Let's switch to a case insensitive enum validator and check that there are no errors:

#!csharp

validator = And(
    IsObject,
    HasRequiredKeys("a", "b"),
    DiveInto("a", IsNumber),
    DiveInto("b", IsNumber),
    DiveInto("c", IsOneOf("First", "Second"))); // `IsOneOf` ignores case by default.
valid = !validator.Validate(target).Any();
valid

#!markdown

## Arrays

#!markdown

## Dictionaries

#!markdown

## Automatic Generation

#!markdown

Let's define a simple type:

#!csharp

record Person(string Name, int Age);

#!markdown

And generate a validator for this type:

#!csharp

var schema = ValidationSchema.FromType(typeof(Person));
validator = schema.GetValidator();

#!markdown

Let's test on some samples of content:

#!csharp

target = JObject.Parse("""
    {
    }
    """);
validator.Validate(target).Display();
target = JObject.Parse("""
    {
        "Name": 10,
        "Age": 20,
    }
    """);
validator.Validate(target).Display();
target = JObject.Parse("""
    {
        "Name": "Henry",
        "Age": 20,
    }
    """);
valid = !validator.Validate(target).Any();
valid

#!markdown

Notice that the `Name: Not a string.` error has a non-empty `Path`.

#!markdown

Let's try again with more complicated types:

#!csharp

record Team(Person Lead, Person[] Members, decimal? Budget);

schema = ValidationSchema.FromType(typeof(Team)); // We generate the validation schema for `Team`, not `Person`.
validator = schema.GetValidator();

target = JObject.Parse("""
    {
        "Lead": {
            "Name": "Henry",
            "Age": 20,
            "Extra": true
        },
        "Members": []
    }
    """);
valid = !validator.Validate(target).Any();
valid

#!markdown

The `Budget` field is `Nullable` and the default schema assumes the field is not required (it's OK if it is `null`).

The default schema generation also allows extra fields by default.

Let's forbid extra fields and make `Budget` a required field:

#!csharp

schema = ValidationSchema.FromType(
    typeof(Team), // We generate the validation schema for `Team`, not `Person`.
    ValidationSchemaOptions
        .Empty 
        .SetAllowExtras(false)
        .AddRequired<Team>(x => x.Budget));
validator = schema.GetValidator();
validator.Validate(target)

#!markdown

Let's fix the content. We also want to make the `Lead` optional:

#!csharp

target = JObject.Parse("""
    {
        "Members": [],
        "Budget": 100
    }
    """);
schema = ValidationSchema.FromType(
    typeof(Team), // We generate the validation schema for `Team`, not `Person`.
    ValidationSchemaOptions
        .Empty
        .SetAllowExtras(false)
        .AddRequired<Team>(x => x.Budget)
        .AddOptional<Team>(x => x.Lead));
validator = schema.GetValidator();
validator.Validate(target)
